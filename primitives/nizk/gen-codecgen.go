//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package nizk

import (
	"errors"
	pkg1_curve25519 "github.com/shaih/go-yosovss/primitives/curve25519"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF87757 = 1
	codecSelferCcRAW7757  = 255
	// ----- value types used ----
	codecSelferValueTypeArray7757     = 10
	codecSelferValueTypeMap7757       = 9
	codecSelferValueTypeString7757    = 6
	codecSelferValueTypeInt7757       = 2
	codecSelferValueTypeUint7757      = 3
	codecSelferValueTypeFloat7757     = 4
	codecSelferValueTypeNil7757       = 1
	codecSelferBitsize7757            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil7757 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct7757 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer7757 struct{}

func codecSelfer7757False() bool { return false }
func codecSelfer7757True() bool  { return true }

func init() {
	if codec1978.GenVersion != 25 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 25, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_curve25519.PointXY
	}
}

func (DLStatement) codecSelferViaCodecgen() {}
func (x *DLStatement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			if x.G == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.G), e)
			} // end block: if x.G slice == nil
			z.EncWriteArrayElem()
			if x.X == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.X), e)
			} // end block: if x.X slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"G\"")
			} else {
				r.EncodeString(`G`)
			}
			z.EncWriteMapElemValue()
			if x.G == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.G), e)
			} // end block: if x.G slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"X\"")
			} else {
				r.EncodeString(`X`)
			}
			z.EncWriteMapElemValue()
			if x.X == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.X), e)
			} // end block: if x.X slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *DLStatement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7757 {
		*(x) = DLStatement{}
	} else if yyct2 == codecSelferValueTypeMap7757 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7757 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7757)
	}
}

func (x *DLStatement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "G":
			h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.G), d)
		case "X":
			h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.X), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *DLStatement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.G), d)
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.X), d)
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *DLStatement) IsCodecEmpty() bool {
	return !(len(x.G) != 0 || len(x.X) != 0 || false)
}

func (DLWitness) codecSelferViaCodecgen() {}
func (x *DLWitness) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			if x.XLog == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.XLog), e)
			} // end block: if x.XLog slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"x\"")
			} else {
				r.EncodeString(`x`)
			}
			z.EncWriteMapElemValue()
			if x.XLog == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.XLog), e)
			} // end block: if x.XLog slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *DLWitness) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7757 {
		*(x) = DLWitness{}
	} else if yyct2 == codecSelferValueTypeMap7757 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7757 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7757)
	}
}

func (x *DLWitness) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "x":
			h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.XLog), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *DLWitness) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.XLog), d)
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *DLWitness) IsCodecEmpty() bool {
	return !(len(x.XLog) != 0 || false)
}

func (DLChHashIn) codecSelferViaCodecgen() {}
func (x *DLChHashIn) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			yy5 := &x.Stmt
			if yyxt6 := z.Extension(yy5); yyxt6 != nil {
				z.EncExtension(yy5, yyxt6)
			} else {
				yy5.CodecEncodeSelf(e)
			}
			z.EncWriteArrayElem()
			if x.Com == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.Com), e)
			} // end block: if x.Com slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"s\"")
			} else {
				r.EncodeString(`s`)
			}
			z.EncWriteMapElemValue()
			yy8 := &x.Stmt
			if yyxt9 := z.Extension(yy8); yyxt9 != nil {
				z.EncExtension(yy8, yyxt9)
			} else {
				yy8.CodecEncodeSelf(e)
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"c\"")
			} else {
				r.EncodeString(`c`)
			}
			z.EncWriteMapElemValue()
			if x.Com == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.Com), e)
			} // end block: if x.Com slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *DLChHashIn) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7757 {
		*(x) = DLChHashIn{}
	} else if yyct2 == codecSelferValueTypeMap7757 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7757 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7757)
	}
}

func (x *DLChHashIn) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "s":
			if yyxt5 := z.Extension(x.Stmt); yyxt5 != nil {
				z.DecExtension(&x.Stmt, yyxt5)
			} else {
				x.Stmt.CodecDecodeSelf(d)
			}
		case "c":
			h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.Com), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *DLChHashIn) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt10 := z.Extension(x.Stmt); yyxt10 != nil {
		z.DecExtension(&x.Stmt, yyxt10)
	} else {
		x.Stmt.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.Com), d)
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *DLChHashIn) IsCodecEmpty() bool {
	return !(!(x.Stmt.IsCodecEmpty()) || len(x.Com) != 0 || false)
}

func (DLProof) codecSelferViaCodecgen() {}
func (x *DLProof) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			if x.Com == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.Com), e)
			} // end block: if x.Com slice == nil
			z.EncWriteArrayElem()
			if x.Resp == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.Resp), e)
			} // end block: if x.Resp slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Com\"")
			} else {
				r.EncodeString(`Com`)
			}
			z.EncWriteMapElemValue()
			if x.Com == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_PointXY(([]pkg1_curve25519.PointXY)(x.Com), e)
			} // end block: if x.Com slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Resp\"")
			} else {
				r.EncodeString(`Resp`)
			}
			z.EncWriteMapElemValue()
			if x.Resp == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.Resp), e)
			} // end block: if x.Resp slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *DLProof) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil7757 {
		*(x) = DLProof{}
	} else if yyct2 == codecSelferValueTypeMap7757 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray7757 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct7757)
	}
}

func (x *DLProof) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "Com":
			h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.Com), d)
		case "Resp":
			h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.Resp), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *DLProof) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_PointXY((*[]pkg1_curve25519.PointXY)(&x.Com), d)
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.Resp), d)
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *DLProof) IsCodecEmpty() bool {
	return !(len(x.Com) != 0 || len(x.Resp) != 0 || false)
}

func (x codecSelfer7757) encSlicecurve25519_PointXY(v []pkg1_curve25519.PointXY, e *codec1978.Encoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			z.F.EncSliceUint8V(([]uint8)(yy2[:]), e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer7757) decSlicecurve25519_PointXY(v *[]pkg1_curve25519.PointXY, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_curve25519.PointXY{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 64)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_curve25519.PointXY, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 64)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_curve25519.PointXY, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_curve25519.PointXY{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					z.F.DecSliceUint8N(([]uint8)(yyv1[yyj1][:]), d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_curve25519.PointXY, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer7757) encSlicecurve25519_Scalar(v []pkg1_curve25519.Scalar, e *codec1978.Encoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			z.F.EncSliceUint8V(([]uint8)(yy2[:]), e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer7757) decSlicecurve25519_Scalar(v *[]pkg1_curve25519.Scalar, d *codec1978.Decoder) {
	var h codecSelfer7757
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_curve25519.Scalar{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_curve25519.Scalar, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_curve25519.Scalar, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_curve25519.Scalar{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					z.F.DecSliceUint8N(([]uint8)(yyv1[yyj1][:]), d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_curve25519.Scalar, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
