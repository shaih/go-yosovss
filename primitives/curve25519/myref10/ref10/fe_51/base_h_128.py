# aborted experiment
# not used

# From supercop
# supercop-20210604/crypto_sign/ed25519/ref10/base.py
# with changes in the base

b = 256
q = 2 ** 255 - 19
l = 2 ** 252 + 27742317777372353535851937790883648493


def expmod(b: int, e: int, m: int):
    if e == 0:
        return 1
    t = expmod(b, e // 2, m) ** 2 % m
    if e & 1:
        t = (t * b) % m
    return t


def inv(x: int):
    return expmod(x, q - 2, q)


d = -121665 * inv(121666)
I = expmod(2, (q - 1) // 4, q)


def xrecover(y: int):
    xx = (y * y - 1) * inv(d * y * y + 1)
    x = expmod(xx, (q + 3) // 8, q)
    if (x * x - xx) % q != 0: x = (x * I) % q
    if x % 2 != 0: x = q - x
    return x


# By = 4 * inv(5)  # original
# we want our new point y for second generator for Pedersen, generated by main.py
By = 0x164af560f4bbc72c8761f6db325864e696c4c86e2c7e1e4fcbded121624f9edd
Bx = xrecover(By)
B = [Bx % q, By % q]


def edwards(P, Q):
    x1 = P[0]
    y1 = P[1]
    x2 = Q[0]
    y2 = Q[1]
    x3 = (x1 * y2 + x2 * y1) * inv(1 + d * x1 * x2 * y1 * y2)
    y3 = (y1 * y2 + x1 * x2) * inv(1 - d * x1 * x2 * y1 * y2)
    return [x3 % q, y3 % q]


def radix51(x):
    # from https://www.iacr.org/archive/ches2011/69170125/69170125.pdf
    x = x % q
    x = [x, 0, 0, 0, 0]
    for i in range(4):
        x[i + 1] = x[i] // (2 ** 51)
        x[i] %= 2 ** 51
    result = ""
    for i in range(4):
        result = result + str(x[i]) + ", "
    result = result + str(x[4])
    return result


Bi = B
for i in range(16):
    print(f"{{ /* {i}/31 */")
    Bij = Bi
    for j in range(128):
        print("  {")
        print("    {", radix51(Bij[1] + Bij[0]), "},")
        print("    {", radix51(Bij[1] - Bij[0]), "},")
        print("    {", radix51(2 * d * Bij[0] * Bij[1]), "}")
        Bij = edwards(Bij, Bi)
        print("  }" + ("," if j < 7 else ""))
    print("}" + ("," if i < 31 else ""))
    for k in range(16):
        Bi = edwards(Bi, Bi)
