// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package auditor

import (
	"errors"
	pkg1_curve25519 "github.com/shaih/go-yosovss/primitives/curve25519"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF89354 = 1
	codecSelferCcRAW9354  = 255
	// ----- value types used ----
	codecSelferValueTypeArray9354     = 10
	codecSelferValueTypeMap9354       = 9
	codecSelferValueTypeString9354    = 6
	codecSelferValueTypeInt9354       = 2
	codecSelferValueTypeUint9354      = 3
	codecSelferValueTypeFloat9354     = 4
	codecSelferValueTypeNil9354       = 1
	codecSelferBitsize9354            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil9354 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct9354 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer9354 struct{}

func codecSelfer9354False() bool { return false }
func codecSelfer9354True() bool  { return true }

func init() {
	if codec1978.GenVersion != 25 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 25, need " + ver + ". Re-generate file: " + file))
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_curve25519.Point
	}
}

func (DealingMessage) codecSelferViaCodecgen() {}
func (x *DealingMessage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [5]bool{     // should field at this index be written?
			len(x.ComS) != 0,    // S
			len(x.EncVerM) != 0, // V
			len(x.EncResM) != 0, // R
			len(x.EncEpsL) != 0, // e
			len(x.HashEps) != 0, // h
		}
		_ = yyq2
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(5)
			z.EncWriteArrayElem()
			if yyq2[0] {
				if x.ComS == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicecurve25519_Point(([][]pkg1_curve25519.Point)(x.ComS), e)
				} // end block: if x.ComS slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[1] {
				if x.EncVerM == nil {
					r.EncodeNil()
				} else {
					h.encSlicecurve25519_Ciphertext(([]pkg1_curve25519.Ciphertext)(x.EncVerM), e)
				} // end block: if x.EncVerM slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[2] {
				if x.EncResM == nil {
					r.EncodeNil()
				} else {
					h.encSlicecurve25519_SymmetricCiphertext(([]pkg1_curve25519.SymmetricCiphertext)(x.EncResM), e)
				} // end block: if x.EncResM slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[3] {
				if x.EncEpsL == nil {
					r.EncodeNil()
				} else {
					h.encSlicecurve25519_Ciphertext(([]pkg1_curve25519.Ciphertext)(x.EncEpsL), e)
				} // end block: if x.EncEpsL slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayElem()
			if yyq2[4] {
				if x.HashEps == nil {
					r.EncodeNil()
				} else {
					h.encSliceSliceArray32uint8(([][][32]uint8)(x.HashEps), e)
				} // end block: if x.HashEps slice == nil
			} else {
				r.EncodeNil()
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			if yyq2[0] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"S\"")
				} else {
					r.EncodeString(`S`)
				}
				z.EncWriteMapElemValue()
				if x.ComS == nil {
					r.EncodeNil()
				} else {
					h.encSliceSlicecurve25519_Point(([][]pkg1_curve25519.Point)(x.ComS), e)
				} // end block: if x.ComS slice == nil
			}
			if yyq2[1] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"V\"")
				} else {
					r.EncodeString(`V`)
				}
				z.EncWriteMapElemValue()
				if x.EncVerM == nil {
					r.EncodeNil()
				} else {
					h.encSlicecurve25519_Ciphertext(([]pkg1_curve25519.Ciphertext)(x.EncVerM), e)
				} // end block: if x.EncVerM slice == nil
			}
			if yyq2[2] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"R\"")
				} else {
					r.EncodeString(`R`)
				}
				z.EncWriteMapElemValue()
				if x.EncResM == nil {
					r.EncodeNil()
				} else {
					h.encSlicecurve25519_SymmetricCiphertext(([]pkg1_curve25519.SymmetricCiphertext)(x.EncResM), e)
				} // end block: if x.EncResM slice == nil
			}
			if yyq2[3] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"e\"")
				} else {
					r.EncodeString(`e`)
				}
				z.EncWriteMapElemValue()
				if x.EncEpsL == nil {
					r.EncodeNil()
				} else {
					h.encSlicecurve25519_Ciphertext(([]pkg1_curve25519.Ciphertext)(x.EncEpsL), e)
				} // end block: if x.EncEpsL slice == nil
			}
			if yyq2[4] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"h\"")
				} else {
					r.EncodeString(`h`)
				}
				z.EncWriteMapElemValue()
				if x.HashEps == nil {
					r.EncodeNil()
				} else {
					h.encSliceSliceArray32uint8(([][][32]uint8)(x.HashEps), e)
				} // end block: if x.HashEps slice == nil
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *DealingMessage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9354 {
		*(x) = DealingMessage{}
	} else if yyct2 == codecSelferValueTypeMap9354 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9354 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9354)
	}
}

func (x *DealingMessage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "S":
			h.decSliceSlicecurve25519_Point((*[][]pkg1_curve25519.Point)(&x.ComS), d)
		case "V":
			h.decSlicecurve25519_Ciphertext((*[]pkg1_curve25519.Ciphertext)(&x.EncVerM), d)
		case "R":
			h.decSlicecurve25519_SymmetricCiphertext((*[]pkg1_curve25519.SymmetricCiphertext)(&x.EncResM), d)
		case "e":
			h.decSlicecurve25519_Ciphertext((*[]pkg1_curve25519.Ciphertext)(&x.EncEpsL), d)
		case "h":
			h.decSliceSliceArray32uint8((*[][][32]uint8)(&x.HashEps), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *DealingMessage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceSlicecurve25519_Point((*[][]pkg1_curve25519.Point)(&x.ComS), d)
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_Ciphertext((*[]pkg1_curve25519.Ciphertext)(&x.EncVerM), d)
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_SymmetricCiphertext((*[]pkg1_curve25519.SymmetricCiphertext)(&x.EncResM), d)
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_Ciphertext((*[]pkg1_curve25519.Ciphertext)(&x.EncEpsL), d)
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = z.DecCheckBreak()
	}
	if yyb14 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceSliceArray32uint8((*[][][32]uint8)(&x.HashEps), d)
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = z.DecCheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
}

func (x *DealingMessage) IsCodecEmpty() bool {
	return !(len(x.ComS) != 0 || len(x.EncVerM) != 0 || len(x.EncResM) != 0 || len(x.EncEpsL) != 0 || len(x.HashEps) != 0 || false)
}

func (VerificationMK) codecSelferViaCodecgen() {}
func (x *VerificationMK) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(2)
			z.EncWriteArrayElem()
			if x.S == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.S), e)
			} // end block: if x.S slice == nil
			z.EncWriteArrayElem()
			if x.R == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.R), e)
			} // end block: if x.R slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(2)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"S\"")
			} else {
				r.EncodeString(`S`)
			}
			z.EncWriteMapElemValue()
			if x.S == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.S), e)
			} // end block: if x.S slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"R\"")
			} else {
				r.EncodeString(`R`)
			}
			z.EncWriteMapElemValue()
			if x.R == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.R), e)
			} // end block: if x.R slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *VerificationMK) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9354 {
		*(x) = VerificationMK{}
	} else if yyct2 == codecSelferValueTypeMap9354 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9354 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9354)
	}
}

func (x *VerificationMK) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "S":
			h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.S), d)
		case "R":
			h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.R), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *VerificationMK) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.S), d)
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = z.DecCheckBreak()
	}
	if yyb8 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.R), d)
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = z.DecCheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
}

func (x *VerificationMK) IsCodecEmpty() bool {
	return !(len(x.S) != 0 || len(x.R) != 0 || false)
}

func (EpsL) codecSelferViaCodecgen() {}
func (x *EpsL) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			if x.Eps == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.Eps), e)
			} // end block: if x.Eps slice == nil
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Eps\"")
			} else {
				r.EncodeString(`Eps`)
			}
			z.EncWriteMapElemValue()
			if x.Eps == nil {
				r.EncodeNil()
			} else {
				h.encSlicecurve25519_Scalar(([]pkg1_curve25519.Scalar)(x.Eps), e)
			} // end block: if x.Eps slice == nil
			z.EncWriteMapEnd()
		}
	}
}

func (x *EpsL) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil9354 {
		*(x) = EpsL{}
	} else if yyct2 == codecSelferValueTypeMap9354 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray9354 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9354)
	}
}

func (x *EpsL) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "Eps":
			h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.Eps), d)
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *EpsL) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = z.DecCheckBreak()
	}
	if yyb6 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSlicecurve25519_Scalar((*[]pkg1_curve25519.Scalar)(&x.Eps), d)
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = z.DecCheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
}

func (x *EpsL) IsCodecEmpty() bool {
	return !(len(x.Eps) != 0 || false)
}

func (x codecSelfer9354) encSliceSlicecurve25519_Point(v [][]pkg1_curve25519.Point, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if v[yyv1] == nil {
			r.EncodeNil()
		} else {
			h.encSlicecurve25519_Point(([]pkg1_curve25519.Point)(v[yyv1]), e)
		} // end block: if v[yyv1] slice == nil
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9354) decSliceSlicecurve25519_Point(v *[][]pkg1_curve25519.Point, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][]pkg1_curve25519.Point{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][]pkg1_curve25519.Point, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][]pkg1_curve25519.Point, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				h.decSlicecurve25519_Point((*[]pkg1_curve25519.Point)(&yyv1[yyj1]), d)
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][]pkg1_curve25519.Point, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9354) encSlicecurve25519_Point(v []pkg1_curve25519.Point, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			z.F.EncSliceUint8V(([]uint8)(yy2[:]), e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9354) decSlicecurve25519_Point(v *[]pkg1_curve25519.Point, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_curve25519.Point{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_curve25519.Point, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_curve25519.Point, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_curve25519.Point{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					z.F.DecSliceUint8N(([]uint8)(yyv1[yyj1][:]), d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_curve25519.Point, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9354) encSlicecurve25519_Ciphertext(v []pkg1_curve25519.Ciphertext, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if yyxt2 := z.Extension(v[yyv1]); yyxt2 != nil {
			z.EncExtension(v[yyv1], yyxt2)
		} else {
			if v[yyv1] == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint8V(([]uint8)(v[yyv1]), e)
			} // end block: if v[yyv1] slice == nil
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9354) decSlicecurve25519_Ciphertext(v *[]pkg1_curve25519.Ciphertext, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_curve25519.Ciphertext{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_curve25519.Ciphertext, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_curve25519.Ciphertext, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					z.F.DecSliceUint8X((*[]uint8)(&yyv1[yyj1]), d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_curve25519.Ciphertext, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9354) encSlicecurve25519_SymmetricCiphertext(v []pkg1_curve25519.SymmetricCiphertext, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if yyxt2 := z.Extension(v[yyv1]); yyxt2 != nil {
			z.EncExtension(v[yyv1], yyxt2)
		} else {
			if v[yyv1] == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceUint8V(([]uint8)(v[yyv1]), e)
			} // end block: if v[yyv1] slice == nil
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9354) decSlicecurve25519_SymmetricCiphertext(v *[]pkg1_curve25519.SymmetricCiphertext, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_curve25519.SymmetricCiphertext{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_curve25519.SymmetricCiphertext, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_curve25519.SymmetricCiphertext, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					z.F.DecSliceUint8X((*[]uint8)(&yyv1[yyj1]), d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_curve25519.SymmetricCiphertext, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9354) encSliceSliceArray32uint8(v [][][32]uint8, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		if v[yyv1] == nil {
			r.EncodeNil()
		} else {
			h.encSliceArray32uint8(([][32]uint8)(v[yyv1]), e)
		} // end block: if v[yyv1] slice == nil
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9354) decSliceSliceArray32uint8(v *[][][32]uint8, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][][32]uint8{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][][32]uint8, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][][32]uint8, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				h.decSliceArray32uint8((*[][32]uint8)(&yyv1[yyj1]), d)
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][][32]uint8, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9354) encSliceArray32uint8(v [][32]uint8, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		h.encArray32uint8((*[32]uint8)(yy2), e)
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9354) decSliceArray32uint8(v *[][32]uint8, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][32]uint8{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][32]uint8, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][32]uint8, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, [32]uint8{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				h.decArray32uint8((*[32]uint8)(&yyv1[yyj1]), d)
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][32]uint8, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9354) encArray32uint8(v *[32]uint8, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	r.EncodeStringBytesRaw(((*[32]byte)(v))[:])
}

func (x codecSelfer9354) decArray32uint8(v *[32]uint8, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	r.DecodeBytes(((*[32]byte)(v))[:])
}

func (x codecSelfer9354) encSlicecurve25519_Scalar(v []pkg1_curve25519.Scalar, e *codec1978.Encoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for yyv1 := range v {
		z.EncWriteArrayElem()
		yy2 := &v[yyv1]
		if yyxt3 := z.Extension(yy2); yyxt3 != nil {
			z.EncExtension(yy2, yyxt3)
		} else {
			z.F.EncSliceUint8V(([]uint8)(yy2[:]), e)
		}
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer9354) decSlicecurve25519_Scalar(v *[]pkg1_curve25519.Scalar, d *codec1978.Decoder) {
	var h codecSelfer9354
	z, r := codec1978.GenHelper().Decoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_curve25519.Scalar{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_curve25519.Scalar, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 32)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]pkg1_curve25519.Scalar, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_curve25519.Scalar{})
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if yyxt3 := z.Extension(yyv1[yyj1]); yyxt3 != nil {
					z.DecExtension(&yyv1[yyj1], yyxt3)
				} else {
					z.F.DecSliceUint8N(([]uint8)(yyv1[yyj1][:]), d)
				}
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]pkg1_curve25519.Scalar, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
