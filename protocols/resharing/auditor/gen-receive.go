// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package auditor

import (
	"fmt"

	"github.com/shaih/go-yosovss/communication"
	"github.com/shaih/go-yosovss/msgpack"
)

// This file is a template generating gen-matrix_generic.go

// ReceiveDealingMessages receives and parse the messages sent by dealers in the dealing round
// parties is the list of parties in the round
func ReceiveDealingMessages(bc communication.BroadcastChannel, parties []int) ([]DealingMessage, error) {
	messages := make([]DealingMessage, len(parties))

	_, bm := bc.ReceiveRound() // get all messages broadcast in the last round (ignore round number)

	for i, party := range parties {
		// decode message sent by member with id==party, store in ith position in messages array
		err := msgpack.Decode(bm[party].Payload, &messages[i])
		if err != nil {
			return nil, fmt.Errorf("decoding message from party %d (id=%d) failed: %v", i, party, err)
		}
	}

	return messages, nil
}

// This file is a template generating gen-matrix_generic.go

// ReceiveVerificationMessages receives and parse the messages sent by the verifying committee
func ReceiveVerificationMessages(bc communication.BroadcastChannel, parties []int) ([]VerificationMessage, error) {
	messages := make([]VerificationMessage, len(parties))

	_, bm := bc.ReceiveRound() // get all messages broadcast in the last round (ignore round number)

	for i, party := range parties {
		// decode message sent by member with id==party, store in ith position in messages array
		err := msgpack.Decode(bm[party].Payload, &messages[i])
		if err != nil {
			return nil, fmt.Errorf("decoding message from party %d (id=%d) failed: %v", i, party, err)
		}
	}

	return messages, nil
}

// This file is a template generating gen-matrix_generic.go

// ReceiveWitnessMessages receives and parse the messages sent by dealers in the dealing round
// parties is the list of parties in the round
func ReceiveWitnessMessages(bc communication.BroadcastChannel, parties []int) ([]WitnessMessage, error) {
	messages := make([]WitnessMessage, len(parties))

	_, bm := bc.ReceiveRound() // get all messages broadcast in the last round (ignore round number)

	for i, party := range parties {
		// decode message sent by member with id==party, store in ith position in messages array
		err := msgpack.Decode(bm[party].Payload, &messages[i])
		if err != nil {
			return nil, fmt.Errorf("decoding message from party %d (id=%d) failed: %v", i, party, err)
		}
	}

	return messages, nil
}

// This file is a template generating gen-matrix_generic.go

// ReceiveAuditingMessages receives and parse the messages sent
// members of the audit committee
func ReceiveAuditingMessages(bc communication.BroadcastChannel, parties []int) ([]AuditingMessage, error) {
	messages := make([]AuditingMessage, len(parties))

	_, bm := bc.ReceiveRound() // get all messages broadcast in the last round (ignore round number)

	for i, party := range parties {
		// decode message sent by member with id==party, store in ith position in messages array
		err := msgpack.Decode(bm[party].Payload, &messages[i])
		if err != nil {
			return nil, fmt.Errorf("decoding message from party %d (id=%d) failed: %v", i, party, err)
		}
	}

	return messages, nil
}

// This file is a template generating gen-matrix_generic.go

// ReceiveResolutionMessages receives and parse the messages sent
// by members of the resolution (future broadcast) committee
func ReceiveResolutionMessages(bc communication.BroadcastChannel, parties []int) ([]ResolutionMessage, error) {
	messages := make([]ResolutionMessage, len(parties))

	_, bm := bc.ReceiveRound() // get all messages broadcast in the last round (ignore round number)

	for i, party := range parties {
		// decode message sent by member with id==party, store in ith position in messages array
		err := msgpack.Decode(bm[party].Payload, &messages[i])
		if err != nil {
			return nil, fmt.Errorf("decoding message from party %d (id=%d) failed: %v", i, party, err)
		}
	}

	return messages, nil
}
