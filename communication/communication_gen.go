package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BroadcastMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "sender_id":
			z.SenderID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SenderID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BroadcastMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "payload"
	err = en.Append(0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	// write "sender_id"
	err = en.Append(0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SenderID)
	if err != nil {
		err = msgp.WrapError(err, "SenderID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BroadcastMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "payload"
	o = append(o, 0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendBytes(o, z.Payload)
	// string "sender_id"
	o = append(o, 0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt(o, z.SenderID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BroadcastMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "sender_id":
			z.SenderID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SenderID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BroadcastMessage) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Payload) + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Orchestrator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Orchestrator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Round"
	err = en.Append(0x81, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Orchestrator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Round"
	o = append(o, 0x81, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Orchestrator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Orchestrator) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PartyBroadcastChannel) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PartyBroadcastChannel) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ID"
	err = en.Append(0x81, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PartyBroadcastChannel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ID"
	o = append(o, 0x81, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PartyBroadcastChannel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PartyBroadcastChannel) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RoundMessages) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "messages":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Messages")
				return
			}
			if cap(z.Messages) >= int(zb0002) {
				z.Messages = (z.Messages)[:zb0002]
			} else {
				z.Messages = make([]BroadcastMessage, zb0002)
			}
			for za0001 := range z.Messages {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Messages", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Messages", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "payload":
						z.Messages[za0001].Payload, err = dc.ReadBytes(z.Messages[za0001].Payload)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "Payload")
							return
						}
					case "sender_id":
						z.Messages[za0001].SenderID, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "SenderID")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001)
							return
						}
					}
				}
			}
		case "round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RoundMessages) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "messages"
	err = en.Append(0x82, 0xa8, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Messages)))
	if err != nil {
		err = msgp.WrapError(err, "Messages")
		return
	}
	for za0001 := range z.Messages {
		// map header, size 2
		// write "payload"
		err = en.Append(0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Messages[za0001].Payload)
		if err != nil {
			err = msgp.WrapError(err, "Messages", za0001, "Payload")
			return
		}
		// write "sender_id"
		err = en.Append(0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Messages[za0001].SenderID)
		if err != nil {
			err = msgp.WrapError(err, "Messages", za0001, "SenderID")
			return
		}
	}
	// write "round"
	err = en.Append(0xa5, 0x72, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RoundMessages) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "messages"
	o = append(o, 0x82, 0xa8, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Messages)))
	for za0001 := range z.Messages {
		// map header, size 2
		// string "payload"
		o = append(o, 0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
		o = msgp.AppendBytes(o, z.Messages[za0001].Payload)
		// string "sender_id"
		o = append(o, 0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
		o = msgp.AppendInt(o, z.Messages[za0001].SenderID)
	}
	// string "round"
	o = append(o, 0xa5, 0x72, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RoundMessages) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "messages":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Messages")
				return
			}
			if cap(z.Messages) >= int(zb0002) {
				z.Messages = (z.Messages)[:zb0002]
			} else {
				z.Messages = make([]BroadcastMessage, zb0002)
			}
			for za0001 := range z.Messages {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Messages", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Messages", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "payload":
						z.Messages[za0001].Payload, bts, err = msgp.ReadBytesBytes(bts, z.Messages[za0001].Payload)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "Payload")
							return
						}
					case "sender_id":
						z.Messages[za0001].SenderID, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "SenderID")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001)
							return
						}
					}
				}
			}
		case "round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RoundMessages) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Messages {
		s += 1 + 8 + msgp.BytesPrefixSize + len(z.Messages[za0001].Payload) + 10 + msgp.IntSize
	}
	s += 6 + msgp.IntSize
	return
}
