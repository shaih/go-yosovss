package communication

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/shaih/go-yosovss/pedersen"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BroadcastMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "sender_id":
			z.SenderID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SenderID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BroadcastMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "payload"
	err = en.Append(0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	// write "sender_id"
	err = en.Append(0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SenderID)
	if err != nil {
		err = msgp.WrapError(err, "SenderID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BroadcastMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "payload"
	o = append(o, 0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendBytes(o, z.Payload)
	// string "sender_id"
	o = append(o, 0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt(o, z.SenderID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BroadcastMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "sender_id":
			z.SenderID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SenderID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BroadcastMessage) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Payload) + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ComplaintResponseMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "complaint_shares":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ComplaintShares")
				return
			}
			if cap(z.ComplaintShares) >= int(zb0002) {
				z.ComplaintShares = (z.ComplaintShares)[:zb0002]
			} else {
				z.ComplaintShares = make([]pedersen.Share, zb0002)
			}
			for za0001 := range z.ComplaintShares {
				err = z.ComplaintShares[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ComplaintShares", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ComplaintResponseMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "complaint_shares"
	err = en.Append(0x81, 0xb0, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ComplaintShares)))
	if err != nil {
		err = msgp.WrapError(err, "ComplaintShares")
		return
	}
	for za0001 := range z.ComplaintShares {
		err = z.ComplaintShares[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ComplaintShares", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ComplaintResponseMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "complaint_shares"
	o = append(o, 0x81, 0xb0, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ComplaintShares)))
	for za0001 := range z.ComplaintShares {
		o, err = z.ComplaintShares[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ComplaintShares", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ComplaintResponseMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "complaint_shares":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ComplaintShares")
				return
			}
			if cap(z.ComplaintShares) >= int(zb0002) {
				z.ComplaintShares = (z.ComplaintShares)[:zb0002]
			} else {
				z.ComplaintShares = make([]pedersen.Share, zb0002)
			}
			for za0001 := range z.ComplaintShares {
				bts, err = z.ComplaintShares[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ComplaintShares", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ComplaintResponseMessage) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize
	for za0001 := range z.ComplaintShares {
		s += z.ComplaintShares[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ComplaintResponseMessageWrapper) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "complaint_shares":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ComplaintShares")
				return
			}
			if cap(z.ComplaintShares) >= int(zb0002) {
				z.ComplaintShares = (z.ComplaintShares)[:zb0002]
			} else {
				z.ComplaintShares = make([]struct {
					Index       int      `msg:"index"`
					IndexScalar [32]byte `msg:"index_scalar"`
					S           [32]byte `msg:"s"`
					R           [32]byte `msg:"r"`
				}, zb0002)
			}
			for za0001 := range z.ComplaintShares {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ComplaintShares", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ComplaintShares", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "index":
						z.ComplaintShares[za0001].Index, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "Index")
							return
						}
					case "index_scalar":
						err = dc.ReadExactBytes((z.ComplaintShares[za0001].IndexScalar)[:])
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "IndexScalar")
							return
						}
					case "s":
						err = dc.ReadExactBytes((z.ComplaintShares[za0001].S)[:])
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "S")
							return
						}
					case "r":
						err = dc.ReadExactBytes((z.ComplaintShares[za0001].R)[:])
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "R")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ComplaintResponseMessageWrapper) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "complaint_shares"
	err = en.Append(0x81, 0xb0, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ComplaintShares)))
	if err != nil {
		err = msgp.WrapError(err, "ComplaintShares")
		return
	}
	for za0001 := range z.ComplaintShares {
		// map header, size 4
		// write "index"
		err = en.Append(0x84, 0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ComplaintShares[za0001].Index)
		if err != nil {
			err = msgp.WrapError(err, "ComplaintShares", za0001, "Index")
			return
		}
		// write "index_scalar"
		err = en.Append(0xac, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBytes((z.ComplaintShares[za0001].IndexScalar)[:])
		if err != nil {
			err = msgp.WrapError(err, "ComplaintShares", za0001, "IndexScalar")
			return
		}
		// write "s"
		err = en.Append(0xa1, 0x73)
		if err != nil {
			return
		}
		err = en.WriteBytes((z.ComplaintShares[za0001].S)[:])
		if err != nil {
			err = msgp.WrapError(err, "ComplaintShares", za0001, "S")
			return
		}
		// write "r"
		err = en.Append(0xa1, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBytes((z.ComplaintShares[za0001].R)[:])
		if err != nil {
			err = msgp.WrapError(err, "ComplaintShares", za0001, "R")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ComplaintResponseMessageWrapper) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "complaint_shares"
	o = append(o, 0x81, 0xb0, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ComplaintShares)))
	for za0001 := range z.ComplaintShares {
		// map header, size 4
		// string "index"
		o = append(o, 0x84, 0xa5, 0x69, 0x6e, 0x64, 0x65, 0x78)
		o = msgp.AppendInt(o, z.ComplaintShares[za0001].Index)
		// string "index_scalar"
		o = append(o, 0xac, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72)
		o = msgp.AppendBytes(o, (z.ComplaintShares[za0001].IndexScalar)[:])
		// string "s"
		o = append(o, 0xa1, 0x73)
		o = msgp.AppendBytes(o, (z.ComplaintShares[za0001].S)[:])
		// string "r"
		o = append(o, 0xa1, 0x72)
		o = msgp.AppendBytes(o, (z.ComplaintShares[za0001].R)[:])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ComplaintResponseMessageWrapper) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "complaint_shares":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ComplaintShares")
				return
			}
			if cap(z.ComplaintShares) >= int(zb0002) {
				z.ComplaintShares = (z.ComplaintShares)[:zb0002]
			} else {
				z.ComplaintShares = make([]struct {
					Index       int      `msg:"index"`
					IndexScalar [32]byte `msg:"index_scalar"`
					S           [32]byte `msg:"s"`
					R           [32]byte `msg:"r"`
				}, zb0002)
			}
			for za0001 := range z.ComplaintShares {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ComplaintShares", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ComplaintShares", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "index":
						z.ComplaintShares[za0001].Index, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "Index")
							return
						}
					case "index_scalar":
						bts, err = msgp.ReadExactBytes(bts, (z.ComplaintShares[za0001].IndexScalar)[:])
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "IndexScalar")
							return
						}
					case "s":
						bts, err = msgp.ReadExactBytes(bts, (z.ComplaintShares[za0001].S)[:])
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "S")
							return
						}
					case "r":
						bts, err = msgp.ReadExactBytes(bts, (z.ComplaintShares[za0001].R)[:])
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001, "R")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ComplaintShares", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ComplaintResponseMessageWrapper) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize + (len(z.ComplaintShares) * (24 + msgp.IntSize + (32 * (msgp.ByteSize)) + (32 * (msgp.ByteSize)) + (32 * (msgp.ByteSize))))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Orchestrator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Orchestrator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Round"
	err = en.Append(0x81, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Orchestrator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Round"
	o = append(o, 0x81, 0xa5, 0x52, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Orchestrator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Orchestrator) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PartyBroadcastChannel) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PartyBroadcastChannel) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ID"
	err = en.Append(0x81, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PartyBroadcastChannel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ID"
	o = append(o, 0x81, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PartyBroadcastChannel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PartyBroadcastChannel) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RoundMessages) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "messages":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Messages")
				return
			}
			if cap(z.Messages) >= int(zb0002) {
				z.Messages = (z.Messages)[:zb0002]
			} else {
				z.Messages = make([]BroadcastMessage, zb0002)
			}
			for za0001 := range z.Messages {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Messages", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Messages", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "payload":
						z.Messages[za0001].Payload, err = dc.ReadBytes(z.Messages[za0001].Payload)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "Payload")
							return
						}
					case "sender_id":
						z.Messages[za0001].SenderID, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "SenderID")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001)
							return
						}
					}
				}
			}
		case "round":
			z.Round, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RoundMessages) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "messages"
	err = en.Append(0x82, 0xa8, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Messages)))
	if err != nil {
		err = msgp.WrapError(err, "Messages")
		return
	}
	for za0001 := range z.Messages {
		// map header, size 2
		// write "payload"
		err = en.Append(0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Messages[za0001].Payload)
		if err != nil {
			err = msgp.WrapError(err, "Messages", za0001, "Payload")
			return
		}
		// write "sender_id"
		err = en.Append(0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.Messages[za0001].SenderID)
		if err != nil {
			err = msgp.WrapError(err, "Messages", za0001, "SenderID")
			return
		}
	}
	// write "round"
	err = en.Append(0xa5, 0x72, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Round)
	if err != nil {
		err = msgp.WrapError(err, "Round")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RoundMessages) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "messages"
	o = append(o, 0x82, 0xa8, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Messages)))
	for za0001 := range z.Messages {
		// map header, size 2
		// string "payload"
		o = append(o, 0x82, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
		o = msgp.AppendBytes(o, z.Messages[za0001].Payload)
		// string "sender_id"
		o = append(o, 0xa9, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64)
		o = msgp.AppendInt(o, z.Messages[za0001].SenderID)
	}
	// string "round"
	o = append(o, 0xa5, 0x72, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.Round)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RoundMessages) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "messages":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Messages")
				return
			}
			if cap(z.Messages) >= int(zb0002) {
				z.Messages = (z.Messages)[:zb0002]
			} else {
				z.Messages = make([]BroadcastMessage, zb0002)
			}
			for za0001 := range z.Messages {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Messages", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Messages", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "payload":
						z.Messages[za0001].Payload, bts, err = msgp.ReadBytesBytes(bts, z.Messages[za0001].Payload)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "Payload")
							return
						}
					case "sender_id":
						z.Messages[za0001].SenderID, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001, "SenderID")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Messages", za0001)
							return
						}
					}
				}
			}
		case "round":
			z.Round, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Round")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RoundMessages) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Messages {
		s += 1 + 8 + msgp.BytesPrefixSize + len(z.Messages[za0001].Payload) + 10 + msgp.IntSize
	}
	s += 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SharerMessageWrapper) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Params":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				switch msgp.UnsafeString(field) {
				case "g":
					err = dc.ReadExactBytes((z.Params.G)[:])
					if err != nil {
						err = msgp.WrapError(err, "Params", "G")
						return
					}
				case "h":
					err = dc.ReadExactBytes((z.Params.H)[:])
					if err != nil {
						err = msgp.WrapError(err, "Params", "H")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Params")
						return
					}
				}
			}
		case "verifications":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Verifications")
				return
			}
			if cap(z.Verifications) >= int(zb0003) {
				z.Verifications = (z.Verifications)[:zb0003]
			} else {
				z.Verifications = make([][32]byte, zb0003)
			}
			for za0003 := range z.Verifications {
				err = dc.ReadExactBytes((z.Verifications[za0003])[:])
				if err != nil {
					err = msgp.WrapError(err, "Verifications", za0003)
					return
				}
			}
		case "encrypted_shares":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "EncryptedShares")
				return
			}
			if cap(z.EncryptedShares) >= int(zb0004) {
				z.EncryptedShares = (z.EncryptedShares)[:zb0004]
			} else {
				z.EncryptedShares = make([][]byte, zb0004)
			}
			for za0005 := range z.EncryptedShares {
				z.EncryptedShares[za0005], err = dc.ReadBytes(z.EncryptedShares[za0005])
				if err != nil {
					err = msgp.WrapError(err, "EncryptedShares", za0005)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SharerMessageWrapper) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Params"
	err = en.Append(0x83, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "g"
	err = en.Append(0x82, 0xa1, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Params.G)[:])
	if err != nil {
		err = msgp.WrapError(err, "Params", "G")
		return
	}
	// write "h"
	err = en.Append(0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Params.H)[:])
	if err != nil {
		err = msgp.WrapError(err, "Params", "H")
		return
	}
	// write "verifications"
	err = en.Append(0xad, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Verifications)))
	if err != nil {
		err = msgp.WrapError(err, "Verifications")
		return
	}
	for za0003 := range z.Verifications {
		err = en.WriteBytes((z.Verifications[za0003])[:])
		if err != nil {
			err = msgp.WrapError(err, "Verifications", za0003)
			return
		}
	}
	// write "encrypted_shares"
	err = en.Append(0xb0, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.EncryptedShares)))
	if err != nil {
		err = msgp.WrapError(err, "EncryptedShares")
		return
	}
	for za0005 := range z.EncryptedShares {
		err = en.WriteBytes(z.EncryptedShares[za0005])
		if err != nil {
			err = msgp.WrapError(err, "EncryptedShares", za0005)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SharerMessageWrapper) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Params"
	o = append(o, 0x83, 0xa6, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73)
	// map header, size 2
	// string "g"
	o = append(o, 0x82, 0xa1, 0x67)
	o = msgp.AppendBytes(o, (z.Params.G)[:])
	// string "h"
	o = append(o, 0xa1, 0x68)
	o = msgp.AppendBytes(o, (z.Params.H)[:])
	// string "verifications"
	o = append(o, 0xad, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Verifications)))
	for za0003 := range z.Verifications {
		o = msgp.AppendBytes(o, (z.Verifications[za0003])[:])
	}
	// string "encrypted_shares"
	o = append(o, 0xb0, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.EncryptedShares)))
	for za0005 := range z.EncryptedShares {
		o = msgp.AppendBytes(o, z.EncryptedShares[za0005])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SharerMessageWrapper) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Params":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				switch msgp.UnsafeString(field) {
				case "g":
					bts, err = msgp.ReadExactBytes(bts, (z.Params.G)[:])
					if err != nil {
						err = msgp.WrapError(err, "Params", "G")
						return
					}
				case "h":
					bts, err = msgp.ReadExactBytes(bts, (z.Params.H)[:])
					if err != nil {
						err = msgp.WrapError(err, "Params", "H")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Params")
						return
					}
				}
			}
		case "verifications":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Verifications")
				return
			}
			if cap(z.Verifications) >= int(zb0003) {
				z.Verifications = (z.Verifications)[:zb0003]
			} else {
				z.Verifications = make([][32]byte, zb0003)
			}
			for za0003 := range z.Verifications {
				bts, err = msgp.ReadExactBytes(bts, (z.Verifications[za0003])[:])
				if err != nil {
					err = msgp.WrapError(err, "Verifications", za0003)
					return
				}
			}
		case "encrypted_shares":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EncryptedShares")
				return
			}
			if cap(z.EncryptedShares) >= int(zb0004) {
				z.EncryptedShares = (z.EncryptedShares)[:zb0004]
			} else {
				z.EncryptedShares = make([][]byte, zb0004)
			}
			for za0005 := range z.EncryptedShares {
				z.EncryptedShares[za0005], bts, err = msgp.ReadBytesBytes(bts, z.EncryptedShares[za0005])
				if err != nil {
					err = msgp.WrapError(err, "EncryptedShares", za0005)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SharerMessageWrapper) Msgsize() (s int) {
	s = 1 + 7 + 1 + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 2 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 14 + msgp.ArrayHeaderSize + (len(z.Verifications) * (32 * (msgp.ByteSize))) + 17 + msgp.ArrayHeaderSize
	for za0005 := range z.EncryptedShares {
		s += msgp.BytesPrefixSize + len(z.EncryptedShares[za0005])
	}
	return
}
